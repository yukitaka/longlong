// Code generated by MockGen. DO NOT EDIT.
// Source: organization_members.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/yukitaka/longlong/internal/domain/entity"
	repository "github.com/yukitaka/longlong/internal/domain/repository"
	value_object "github.com/yukitaka/longlong/internal/domain/value_object"
)

// MockOrganizationMembers is a mock of OrganizationMembers interface.
type MockOrganizationMembers struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationMembersMockRecorder
}

// MockOrganizationMembersMockRecorder is the mock recorder for MockOrganizationMembers.
type MockOrganizationMembersMockRecorder struct {
	mock *MockOrganizationMembers
}

// NewMockOrganizationMembers creates a new mock instance.
func NewMockOrganizationMembers(ctrl *gomock.Controller) *MockOrganizationMembers {
	mock := &MockOrganizationMembers{ctrl: ctrl}
	mock.recorder = &MockOrganizationMembersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationMembers) EXPECT() *MockOrganizationMembersMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOrganizationMembers) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockOrganizationMembersMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOrganizationMembers)(nil).Close))
}

// Entry mocks base method.
func (m *MockOrganizationMembers) Entry(organizationId, individualId int, role value_object.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entry", organizationId, individualId, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// Entry indicates an expected call of Entry.
func (mr *MockOrganizationMembersMockRecorder) Entry(organizationId, individualId, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entry", reflect.TypeOf((*MockOrganizationMembers)(nil).Entry), organizationId, individualId, role)
}

// Find mocks base method.
func (m *MockOrganizationMembers) Find(organizationId, individualId int) (*entity.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", organizationId, individualId)
	ret0, _ := ret[0].(*entity.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockOrganizationMembersMockRecorder) Find(organizationId, individualId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockOrganizationMembers)(nil).Find), organizationId, individualId)
}

// IndividualsAssigned mocks base method.
func (m *MockOrganizationMembers) IndividualsAssigned(individual *[]entity.Individual) (*[]entity.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndividualsAssigned", individual)
	ret0, _ := ret[0].(*[]entity.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndividualsAssigned indicates an expected call of IndividualsAssigned.
func (mr *MockOrganizationMembersMockRecorder) IndividualsAssigned(individual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndividualsAssigned", reflect.TypeOf((*MockOrganizationMembers)(nil).IndividualsAssigned), individual)
}

// Leave mocks base method.
func (m *MockOrganizationMembers) Leave(organizationId, individualId int, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", organizationId, individualId, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave.
func (mr *MockOrganizationMembersMockRecorder) Leave(organizationId, individualId, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockOrganizationMembers)(nil).Leave), organizationId, individualId, reason)
}

// Members mocks base method.
func (m *MockOrganizationMembers) Members(organization *entity.Organization, individualRepository repository.Individuals) (*[]entity.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Members", organization, individualRepository)
	ret0, _ := ret[0].(*[]entity.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Members indicates an expected call of Members.
func (mr *MockOrganizationMembersMockRecorder) Members(organization, individualRepository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockOrganizationMembers)(nil).Members), organization, individualRepository)
}
