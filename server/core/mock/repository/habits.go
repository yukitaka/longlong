// Code generated by MockGen. DO NOT EDIT.
// Source: habits.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/yukitaka/longlong/server/core/pkg/domain/entity"
)

// MockHabits is a mock of Habits interface.
type MockHabits struct {
	ctrl     *gomock.Controller
	recorder *MockHabitsMockRecorder
}

// MockHabitsMockRecorder is the mock recorder for MockHabits.
type MockHabitsMockRecorder struct {
	mock *MockHabits
}

// NewMockHabits creates a new mock instance.
func NewMockHabits(ctrl *gomock.Controller) *MockHabits {
	mock := &MockHabits{ctrl: ctrl}
	mock.recorder = &MockHabitsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHabits) EXPECT() *MockHabitsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockHabits) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockHabitsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHabits)(nil).Close))
}

// Create mocks base method.
func (m *MockHabits) Create(name, timer string) (*entity.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, timer)
	ret0, _ := ret[0].(*entity.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockHabitsMockRecorder) Create(name, timer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHabits)(nil).Create), name, timer)
}

// Find mocks base method.
func (m *MockHabits) Find(id int) (*entity.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*entity.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockHabitsMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockHabits)(nil).Find), id)
}
